<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[axeFx]]></title><description><![CDATA[A software developer blog, with Advanced design in mind.]]></description><link>https://axefx.github.io</link><image><url>https://axefx.github.io/logos/logo-512.png</url><title>axeFx</title><link>https://axefx.github.io</link></image><generator>GatsbyJS Material Starter</generator><lastBuildDate>Tue, 20 Oct 2020 07:23:53 GMT</lastBuildDate><atom:link href="https://axefx.github.io/rss.xml" rel="self" type="application/rss+xml"/><author><![CDATA[Axel]]></author><copyright><![CDATA[Copyright © 2017. axeFx.github.io]]></copyright><item><title><![CDATA[Visualizing Police Brutality]]></title><description><![CDATA[Visualizing Police Brutality Lambda school has a program called Labs, it is designed to partner students with a non profit organization and…]]></description><link>https://axefx.github.io/visualizing-police-brutality</link><guid isPermaLink="false">https://axefx.github.io/visualizing-police-brutality</guid><category><![CDATA[Data Science]]></category><dc:creator><![CDATA[Axel]]></dc:creator><pubDate>Fri, 25 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;visualizing-police-brutality&quot;&gt;&lt;a href=&quot;#visualizing-police-brutality&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Visualizing Police Brutality&lt;/h1&gt;
&lt;p&gt;Lambda school has a program called Labs, it is designed to partner students with a non profit organization and develop an app that fits the organizations needs. It is meant to give students a hands on experience in working with a client. During my time in Labs I worked with the organization named Human Rights First. Human Rights First is an organization that challenges America to live up to its ideals, with the belief that American leadership is essential to the global struggle for human rights.
The product that the client, Human Rights First, requested for students to build was a web app that visualizes the conversation that happens on social media regarding any police brutality incidents happening in the United States. The client wants to be able to have a resource that journalists, activists, and lawyers can use to have an overview of incidents people are sharing on social media. The product I helped develop was the data science api, that handles gathering data, cleaning and filtering data, feature development and visualization. Some initial concerns regarding the projects were being able to get access to social media and its data.
In order to take on this project it was necessary to really have a clear roadmap of the features needed to deliver, something that was really difficult with all the uncertainties with data access. As a team we broke down the roadmap into actionable tasks including lots of research, filling in all the blanks in between inception and deployment working with what we had. At first iteration we decided to outsource the data access problems and found a very helpful api from another non profit organization that shared police incidents as it was reported to them. This resource allowed us to get started with feature development on already processed data.&lt;/p&gt;
&lt;p&gt;Categorizing Police Brutality
I quickly found out that this project was going to be really heavy on using natural language processing tools. Although the main goal was to visualize the data on a map, in order to achieve a useful user experience we found that we needed to categorize each incident with the type of force that was used in the incident. This was quite a challenge since the data we were working with did not include categories, therefore we did not have training data to use on a predictive model. After some research and guidance from leads we found a tool called Snorkel. Snorkel seems to be quite new and cutting edge, it is considered to be a sort of weak supervision predictive model that is used to create labels that can then be used to train a more robust predictive model. Accepting the challenge to learn a new tool I read the documentation and labeled 70 percent of the data.&lt;/p&gt;
&lt;p&gt;Current State
A major step in the right direction was completed when we built a training dataset with labels of the type of force in the incident. The next step was to build a predictive model that we can hook up to incoming data from the outsourced api. The model is still in development but as of now we have labeled data of police incidents that have location coordinates and being visualized using the plotly mapping library. Although it is not a dynamic import of data as of now it was essential to deploy and provide our frontend team this achieved state so they can too have a view of the horizon of what it can look like when finished. This is really helpful to encounter and find problems that might be lurking in the future.&lt;/p&gt;
&lt;p&gt;It has been a great pleasure working on this project on a very important and current topic. Stay tuned for more progress and updates.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[K-Nearest Neighbors Classifier]]></title><description><![CDATA[Using A KNN Classifier K-nearest neighbor classifier is considered a supervised machine learning algorithm. It is used to solve…]]></description><link>https://axefx.github.io/k-nearest-neighbors-classifier</link><guid isPermaLink="false">https://axefx.github.io/k-nearest-neighbors-classifier</guid><category><![CDATA[Data_Science]]></category><dc:creator><![CDATA[Axel]]></dc:creator><pubDate>Thu, 25 Jun 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;using-a-knn-classifier&quot;&gt;&lt;a href=&quot;#using-a-knn-classifier&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using A KNN Classifier&lt;/h2&gt;
&lt;p&gt;K-nearest neighbor classifier is considered a supervised machine learning algorithm. It is used to solve classification or regression challenges in a data analysis project. One example of a classification challenge is demonstrated in the “iris flower” dataset. The dataset contains data records of different iris plants and their physical measurements as well as the class or type of iris flower it belongs to. This dataset can be used to train a KNN algorithm that can classify the type of a new flower based on its physical properties.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.pngkey.com/png/detail/82-826789_iris-iris-sepal-and-petal.png&quot; alt=&quot;iris classes&quot;&gt;
&lt;a href=&quot;https://scikit-learn.org/stable/datasets/index.html#iris-dataset&quot;&gt;iris dataset&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-is-the-algorithm-doing&quot;&gt;&lt;a href=&quot;#what-is-the-algorithm-doing&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is the algorithm doing?&lt;/h2&gt;
&lt;p&gt;The K-nearest neighbors (KNN for short) algorithm expects a “K” parameter and its input training data to be vector representations of the data features being analyzed. The “K” refers to the number of neighbors to group by when training and storing the input data. The distance between the data inputs are measured, using different metrics such as &lt;strong&gt;Euclidean distance&lt;/strong&gt;, and stores them into memory.&lt;img src=&quot;https://wikimedia.org/api/rest_v1/media/math/render/svg/795b967db2917cdde7c2da2d1ee327eb673276c0&quot; alt=&quot;eucledian distance&quot;&gt;
KNN algorithm can make use of a K dimensional tree (KD Tree) as its data structure. A KD tree is a “binary tree”, in which every leaf node is a k-dimensional point in a space matrix. The KD tree and the distance calculated can be used to store them as “neighbors” of each other. After training your algorithm to the dataset it can be used to find a classification of new data input. The KNN classifier uses a majority of votes method, by using the nearest neighbors returned by the data structure, to classify the new data point. The accuracy is impacted by the parameter “K” which groups which points should be considered neighbors, using an odd value for k helps avoid ties in votes.&lt;/p&gt;
&lt;div style=&quot;width:60%;padding:5px5px;margin:auto;&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/axefx/axefx.github.io/source/content/sample-posts/06%E2%80%9325-2020-KNearest_Neighbors/kd-tree.png&quot; alt=&quot;kd-tree&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;implementing-a-simple-knn-in-python&quot;&gt;&lt;a href=&quot;#implementing-a-simple-knn-in-python&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Implementing A Simple KNN in python&lt;/h2&gt;
&lt;h3 id=&quot;dependencies&quot;&gt;&lt;a href=&quot;#dependencies&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependencies:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;KD tree data structure from scipy&lt;/li&gt;
&lt;li&gt;Counter from python collection&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;description&quot;&gt;&lt;a href=&quot;#description&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Description:&lt;/h3&gt;
&lt;p&gt;KNN algorithm as a python class&lt;br&gt;
Takes k parameter in class instantiation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fit method&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;load X and y inputs into class variables&lt;/li&gt;
&lt;li&gt;pass X into the KD tree as class variable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Predict method&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For each predict input query and save nearest_neighbors to class variable&lt;/li&gt;
&lt;li&gt;Create a list of labels from the nearest_neighbors&lt;/li&gt;
&lt;li&gt;Return the result of majority vote method on nearest_neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Majority vote method&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use counter to count all labels of nearest_neighbors&lt;/li&gt;
&lt;li&gt;Use the most_common method&lt;/li&gt;
&lt;li&gt;repeat counting for all labels&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kneighbors method&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does predict function and returns the nearest_neighbor class variable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;check-out-the-colab-notebook&quot;&gt;&lt;a href=&quot;#check-out-the-colab-notebook&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Check out the &lt;a href=&quot;https://colab.research.google.com/drive/1fIKfky_xc0U4Rw5n2hIoVRS7sH9I0qwV?usp=sharing&quot;&gt;colab notebook&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;check-out-the-github-repo&quot;&gt;&lt;a href=&quot;#check-out-the-github-repo&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Check out the &lt;a href=&quot;https://github.com/axefx/CS-Data-Science-Build-Week-1/blob/master/src/knn.py&quot;&gt;github repo&lt;/a&gt;&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[Property Values Analysis]]></title><description><![CDATA[2019 Property values in Diamond Bar, CA Overview In 2019, as provided by the  Los Angeles county data portal , there were 46,756 accessor…]]></description><link>https://axefx.github.io/property-values-analysis</link><guid isPermaLink="false">https://axefx.github.io/property-values-analysis</guid><category><![CDATA[Data_Science]]></category><dc:creator><![CDATA[Axel]]></dc:creator><pubDate>Fri, 06 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;2019-property-values-in-diamond-bar-ca&quot;&gt;&lt;a href=&quot;#2019-property-values-in-diamond-bar-ca&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2019 Property values in Diamond Bar, CA&lt;/h1&gt;
&lt;h2 id=&quot;overview&quot;&gt;&lt;a href=&quot;#overview&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;p&gt;In 2019, as provided by the &lt;a href=&quot;https://data.lacounty.gov/Parcel-/Assessor-Parcels-Data-2019/csig-gtr7&quot;&gt;Los Angeles county data portal&lt;/a&gt;, there were 46,756 accessor parcel records for the zip code 91765.
Within the zip code 91765 the main city located there is Diamond Bar, CA. As I continued my analysis my main question was what is the average price of homes and how affordable are they.&lt;/p&gt;
&lt;h2 id=&quot;location&quot;&gt;&lt;a href=&quot;#location&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Location&lt;/h2&gt;
&lt;div style=&quot;width:50%;float:right;padding:0px 5px&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/axefx/axefx.github.io/source/content/sample-posts/03%E2%80%9306-2020-Property-Values-Analysis/diamond-bar-location.png&quot; alt=&quot;location-diamond-bar&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;According to Wikipedia, &quot;Diamond Bar is a city in eastern Los Angeles County, California, United States.[9] As of the 2010 census it had a population of 55,544,[10] and in 2018 the population was estimated to be 56,275.&quot; &lt;a href=&apos;https://en.wikipedia.org/wiki/Diamond_Bar,_California&apos;&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;average-prices&quot;&gt;&lt;a href=&quot;#average-prices&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Average Prices&lt;/h2&gt;
&lt;p&gt;In the accessor records, I found out of the different types of use cases that 97% were specifically used for Single Family Residences.
When used as a family residence, I found that the building types were 25% were condos and 72% Single Family Residence type.&lt;/p&gt;
&lt;div style=&quot;width:60%;padding:5px5px;margin:auto;&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/axefx/axefx.github.io/source/content/sample-posts/03%E2%80%9306-2020-Property-Values-Analysis/average-totalvalues.png&quot; alt=&quot;average-totalvalues&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;After narrowing down the data, I found that Single Family Residence buildings had an average total value of about $579,819.
On the other side condos had an average total value of about 343,247.&lt;/p&gt;
&lt;h2 id=&quot;affordability&quot;&gt;&lt;a href=&quot;#affordability&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Affordability&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/axefx/axefx.github.io/source/content/sample-posts/03%E2%80%9306-2020-Property-Values-Analysis/affordability.png&quot; alt=&quot;affordability&quot;&gt;&lt;/p&gt;
&lt;p&gt;After calculating some monthly payments of household incomes and using the recommended 30% of your yearly income for your house payments, I analysed those results against the data.
In the city of Diamond Bar, 42% of Single Family Residences were considered affordable with a minimum income of 50,000 a year and a down payment of 20%.
26% of the of those residences fall under the range between 50,000 and 75,000 of yearly income.&lt;/p&gt;</content:encoded></item></channel></rss>