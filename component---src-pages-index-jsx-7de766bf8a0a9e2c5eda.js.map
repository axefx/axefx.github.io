{"version":3,"file":"component---src-pages-index-jsx-7de766bf8a0a9e2c5eda.js","mappings":"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","sources":["webpack://axefx/./src/components/Avatar/index.js","webpack://axefx/./src/components/Avatar/Avatar.jsx","webpack://axefx/./src/components/Media/MediaContainer.jsx","webpack://axefx/./src/components/Media/MediaOverlay.jsx","webpack://axefx/./src/components/PostListing/PostPreview.jsx","webpack://axefx/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://axefx/./src/components/PostListing/PostListing.jsx","webpack://axefx/./src/components/Chip/index.js","webpack://axefx/./src/components/Chip/Chip.jsx","webpack://axefx/./src/components/PostTags/PostTags.jsx","webpack://axefx/./src/components/SEO/SEO.jsx","webpack://axefx/./src/pages/index.jsx"],"sourcesContent":["import Avatar from \"./Avatar\";\nexport default Avatar;\n","import React from \"react\";\n\nconst Avatar = () => {\n  return <div className=\"avatar avatar--default\"></div>;\n};\n\nexport default Avatar;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst MediaContainer = ({ children, cover, coverHeight, className }) => {\n  return (\n    <div\n      className={className}\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"end\",\n        backgroundImage: `url(${cover})`,\n        height: `${coverHeight}px`,\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nMediaContainer.propTypes = {\n  cover: PropTypes.string,\n  coverHeight: PropTypes.number,\n  className: PropTypes.string,\n};\n\nexport default MediaContainer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst MediaOverlay = (props) => {\n  return (\n    <div\n      className=\"media-overlay\"\n      style={{ backgroundColor: \"rgba(0,0,0,0.5)\", zIndex: 2, display: \"flex\" }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nMediaOverlay.propTypes = {};\n\nexport default MediaOverlay;\n","import React, { Component } from \"react\";\nimport Link from \"gatsby-link\";\nimport PostTags from \"../PostTags/PostTags\";\nimport Card, { CardTitle, CardText, CardSubtitle } from \"../Card\";\nimport Button from \"../Button\";\nimport Avatar from \"../Avatar\";\nimport { MediaContainer, MediaOverlay } from \"../Media\";\nimport { isBrowser } from \"../../utils\";\n\nclass PostPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true,\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    if (isBrowser) {\n      window.addEventListener(\"resize\", this.handleResize);\n    }\n  }\n\n  componentWillUnmount() {\n    if (isBrowser) {\n      window.removeEventListener(\"resize\", this.handleResize);\n    }\n  }\n\n  handleResize() {\n    if (isBrowser) {\n      if (window.innerWidth >= 640) {\n        this.setState({ mobile: false });\n      } else {\n        this.setState({ mobile: true });\n      }\n    }\n  }\n  render() {\n    const { postInfo } = this.props;\n    const { mobile } = this.state;\n    const expand = mobile;\n    /* eslint no-undef: \"off\"*/\n    const cover = postInfo.cover.startsWith(\"/\")\n      ? __PATH_PREFIX__ + postInfo.cover\n      : postInfo.cover;\n    const coverHeight = mobile ? 162 : 225;\n    return (\n      <Card key={postInfo.path}>\n        <Link style={{ textDecoration: \"none\" }} to={postInfo.path}>\n          <MediaContainer\n            className=\"post-preview-cover\"\n            cover={cover}\n            coverHeight={coverHeight}\n          >\n            <MediaOverlay>\n              <CardTitle\n                className=\"card-title--primary card-title--title-large\"\n                title={postInfo.title}\n              >\n                <Button theme=\"secondary\">Read</Button>\n              </CardTitle>\n            </MediaOverlay>\n          </MediaContainer>\n        </Link>\n        <CardSubtitle\n          className=\"card-title--secondary card-title\"\n          expander={expand}\n          avatar={<Avatar />}\n          title={`Published on ${postInfo.date}`}\n          subtitle={`${postInfo.timeToRead} min read`}\n        />\n\n        <CardText expandable={expand}>\n          {postInfo.excerpt}\n          <PostTags tags={postInfo.tags} />\n        </CardText>\n      </Card>\n    );\n  }\n}\n\nexport default PostPreview;\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import React from \"react\";\nimport PostPreview from \"./PostPreview\";\n\nconst PostListing = (props) => {\n  const postList = props.postEdges.map((postEdge) => ({\n    path: postEdge.node.fields.slug,\n    tags: postEdge.node.frontmatter.tags,\n    cover: postEdge.node.frontmatter.cover,\n    title: postEdge.node.frontmatter.title,\n    date: postEdge.node.frontmatter.date,\n    excerpt: postEdge.node.excerpt,\n    timeToRead: postEdge.node.timeToRead,\n  }));\n  return (\n    <div id=\"postListingContainer\">\n      <h2>Recent Posts</h2>\n      {postList.map((post) => (\n        <PostPreview key={post.title} postInfo={post} />\n      ))}\n    </div>\n  );\n};\n\nexport default PostListing;\n","import Chip from \"./Chip\";\nexport default Chip;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Chip = (props) => {\n  return <span className={props.className + \" chip\"}>{props.label}</span>;\n};\n\nChip.propTypes = {};\n\nexport default Chip;\n","import React, { Component } from \"react\";\nimport Link from \"gatsby-link\";\nimport Chip from \"../Chip\";\nimport { kebabCase } from \"../../utils\";\n\nclass PostTags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"post-tag-container\">\n        {tags &&\n          tags.map((tag) => (\n            <Link\n              key={tag}\n              style={{ textDecoration: \"none\" }}\n              to={`/tags/${kebabCase(tag)}`}\n            >\n              <Chip label={tag} className=\"post-preview-tags\" />\n            </Link>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default PostTags;\n","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      title = postMeta.title;\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n      postURL = config.siteUrl + config.pathPrefix + postPath;\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n    const realPrefix = config.pathPrefix === \"/\" ? \"\" : config.pathPrefix;\n    image = config.siteUrl + realPrefix + image;\n    const blogURL = config.siteUrl + config.pathPrefix;\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push([\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      ]);\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport MainLayout from \"../components/Layout\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport SEO from \"../components/SEO/SEO\";\nimport config from \"../../data/SiteConfig\";\n\nclass Index extends React.Component {\n  render() {\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n    return (\n      <div className=\"index-container\">\n        <Helmet>\n          <title>{config.siteTitle}</title>\n          <link rel=\"canonical\" href={`${config.siteUrl}`} />\n        </Helmet>\n        <MainLayout className=\"main-layout-grid\" location={this.props.location}>\n          <SEO postEdges={postEdges} />\n          <PostListing postEdges={postEdges} />\n        </MainLayout>\n      </div>\n    );\n  }\n}\n\nexport default Index;\n\n/* eslint no-undef: \"off\"*/\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["className","children","cover","coverHeight","style","display","flexDirection","justifyContent","backgroundImage","height","props","backgroundColor","zIndex","PostPreview","state","mobile","handleResize","bind","self","ReferenceError","componentDidMount","this","isBrowser","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","render","postInfo","expand","startsWith","__PATH_PREFIX__","Card","key","path","textDecoration","to","title","Button","theme","expander","avatar","Avatar","date","subtitle","timeToRead","expandable","excerpt","PostTags","tags","Component","postList","postEdges","map","postEdge","node","fields","slug","frontmatter","id","post","label","tag","kebabCase","SEO","description","image","postURL","postNode","postPath","postSEO","postMeta","config","realPrefix","blogURL","schemaOrgJSONLD","url","name","alternateName","push","itemListElement","position","item","headline","content","type","JSON","stringify","property","Index","data","allMarkdownRemark","edges","rel","href","location","React"],"sourceRoot":""}